generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  auditLogs     AuditLog[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Item {
  id          String   @id @default(cuid())
  name        String
  description String?
  quantity    Int      @default(0)
  categoryId  String
  locationId  String
  qrCode      String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  category    Category @relation(fields: [categoryId], references: [id])
  location    Location @relation(fields: [locationId], references: [id])
  customFields Json?
  auditLogs   AuditLog[]
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  items       Item[]
  customFields CustomField[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CustomField {
  id          String   @id @default(cuid())
  name        String
  type        String   // "text", "number", "date", "boolean", "select"
  required    Boolean  @default(false)
  options     String[] // For select type fields
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([categoryId, name])
}

model Location {
  id          String   @id @default(cuid())
  name        String
  description String?
  items       Item[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Add parent-child relationship
  parentId    String?
  parent      Location?  @relation("LocationHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children    Location[] @relation("LocationHierarchy")

  // Add path for efficient querying and display
  path        String    @default("/")
  fullPath    String    @unique // Stores full path like "/Warehouse 1/Shelf A/Bin 1"
  level       Int       @default(0)

  @@index([parentId])
  @@index([path])
  @@index([level])
  @@index([name])
}

model AuditLog {
  id        String      @id @default(cuid())
  action    AuditAction
  userId    String
  itemId    String?
  details   Json?
  createdAt DateTime    @default(now())
  user      User        @relation(fields: [userId], references: [id])
  item      Item?       @relation(fields: [itemId], references: [id])
}

model Settings {
  id                String   @id @default(cuid())
  azureClientId     String?
  azureTenantId     String?
  azureClientSecret String?
  updatedAt         DateTime @updatedAt
}

enum Role {
  ADMIN
  EDITOR
  READ_ONLY
  USER
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
} 